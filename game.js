const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const startBtn = document.getElementById('startBtn');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
const PLAYER_SIZE = {
    width: 96,
    height: 96
};

const BULLET_SIZE = {
    width: 128,
    height: 128
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const images = {
    player: new Image(),
    bullet: new Image()
};

images.player.src = 'assets/player.png';
images.bullet.src = 'assets/bullet.png';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
canvas.width = 800;
canvas.height = 800;

let player = {
    x: 400,
    y: 750,
    ...PLAYER_SIZE, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    speed: 0,
    maxSpeed: 7
};

const ENEMY_TEXTS = [
    ["4/", "10"],
    ["–°–ú–û–¢–†–ò", "–¢–£–î–ê"],
    ["–õ–Æ–ë–õ–Æ", "–¢–ï–ë–Ø"],
    ["-–õ–Æ–ë–õ–Æ", "-–ù–û–†–ú"],
    ["–õ–û–û–û–•", "ü§°"],
    ["ZZZ", "ZOV"],
    ["-üòΩüòΩüòΩ","-üòΩüòΩüòΩ"]
];
const ENEMY_SIZE = 80; // –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –≤—Ä–∞–≥–∞

let bullets = [];
let enemies = [];
let score = 0;
let lives = 3;
let gameInterval;
let animationFrame;
let keys = {};

const winModal = document.getElementById('winModal');
const closeModalBtn = document.getElementById('closeModalBtn');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkVictory() {
    if (score >= 3000) {
        gameOver();
        showWinModal();
    }
}

function showWinModal() {
    winModal.style.display = 'block';
}

function hideWinModal() {
    winModal.style.display = 'none';
}

closeModalBtn.addEventListener('click', hideWinModal);

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
document.addEventListener('keydown', (e) => {
    if(['Space', 'ArrowUp', 'ArrowDown'].includes(e.code)) e.preventDefault();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', (e) => {
    keys[e.code] = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º e.code –≤–º–µ—Å—Ç–æ e.key
});
document.addEventListener('keyup', (e) => {
    keys[e.code] = false;
});

function handleInput() {
    // –°—Ç—Ä–µ–ª—å–±–∞ –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É –≤–≤–µ—Ä—Ö
    if(keys['KeyW'] && !player.isShooting) {
        shoot();
        player.isShooting = true;
        setTimeout(() => player.isShooting = false, 300);
    }
    
    // –î–≤–∏–∂–µ–Ω–∏–µ
    if(keys['KeyA']) {
        player.speed = -player.maxSpeed;
    } else if(keys['KeyD']) {
        player.speed = player.maxSpeed;
    } else {
        player.speed *= 0.85;
    }
    
    player.x += player.speed;
    player.x = Math.max(0, Math.min(canvas.width - player.width + 100, player.x));
}

function shoot() {
    bullets.push({
        x: player.x + PLAYER_SIZE.width/2 - BULLET_SIZE.width/2 + 15,
        y: player.y - PLAYER_SIZE.height/2,
        ...BULLET_SIZE, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        speed: -12
    });
}

function spawnEnemy() {
    enemies.push({
        x: Math.random() * (canvas.width - ENEMY_SIZE),
        y: -ENEMY_SIZE,
        width: ENEMY_SIZE,
        height: ENEMY_SIZE,
        speed: Math.random() * 2 + 2,
        texts: ENEMY_TEXTS[Math.floor(Math.random() * ENEMY_TEXTS.length)]
    });
}

function update() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª—å
    bullets = bullets.filter(bullet => {
        bullet.y += bullet.speed;
        return bullet.y > -bullet.height;
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
    enemies = enemies.filter(enemy => {
        enemy.y += enemy.speed;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        if (enemy.y >= canvas.height - enemy.height) {
            lives--;
            document.getElementById('lives').textContent = '‚ù§Ô∏è'.repeat(lives);
            return false;
        }

        return true;
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π
    bullets.forEach((bullet, bIdx) => {
        enemies.forEach((enemy, eIdx) => {
            if (checkCollision(bullet, enemy)) {
                bullets.splice(bIdx, 1);
                enemies.splice(eIdx, 1);
                score += 100;
                document.getElementById('score').textContent = score;
                checkVictory(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—á–∫–æ–≤
            }
        });
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π
    document.getElementById('lives').textContent = '‚ù§Ô∏è'.repeat(lives);
    if (lives <= 0) gameOver();
}

function draw() {
    ctx.fillStyle = 'black';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
    ctx.drawImage(
        images.player,
        player.x - PLAYER_SIZE.width/2,
        player.y - PLAYER_SIZE.height/2,
        PLAYER_SIZE.width,
        PLAYER_SIZE.height
    );

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É–ª—å
    bullets.forEach(bullet => {
        ctx.drawImage(
            images.bullet,
            bullet.x - BULLET_SIZE.width/2,
            bullet.y - BULLET_SIZE.height/2,
            BULLET_SIZE.width,
            BULLET_SIZE.height
        );
    });

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Ä–∞–≥–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø—Ä–∞–π—Ç—ã)
    ctx.fillStyle = '#a83232';
    enemies.forEach(enemy => {
        // –ö–≤–∞–¥—Ä–∞—Ç
        ctx.fillStyle = '#ff4d6d';
        ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
        
        // –¢–µ–∫—Å—Ç
        ctx.fillStyle = 'white';
        ctx.font = 'bold 18px Arial';
        ctx.textAlign = 'center';
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        const lineHeight = 25;
        const startY = enemy.y + (enemy.height - (enemy.texts.length * lineHeight)) / 2 + 20;
        
        enemy.texts.forEach((text, index) => {
            ctx.fillText(
                text,
                enemy.x + enemy.width/2,
                startY + (index * lineHeight)
            );
        });
    });
}

function checkCollision(a, b) {
    return a.x < b.x + b.width &&
           a.x + a.width > b.x &&
           a.y < b.y + b.height &&
           a.y + a.height > b.y;
}

function gameLoop() {
    handleInput();
    update();
    draw();
    animationFrame = requestAnimationFrame(gameLoop);
}

function gameOver() {
    cancelAnimationFrame(animationFrame);
    clearInterval(gameInterval);
    startBtn.style.display = 'block';
}

function startGame() {
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é —á–∞—Å—Ç—å
    const gameTitle = document.getElementById('gameTitle');
    const gameCanvas = document.getElementById('gameCanvas');
    const hud = document.querySelector('.hud');
    
    gameTitle.style.display = 'none';
    gameCanvas.style.display = 'block';
    hud.style.display = 'block';
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    player.x = 400;
    score = 0;
    lives = 3;
    bullets = [];
    enemies = [];
    keys = {};
    
    document.getElementById('score').textContent = '0';
    document.getElementById('lives').textContent = '‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è';
    startBtn.style.display = 'none';
    
    clearInterval(gameInterval);
    gameInterval = setInterval(spawnEnemy, Math.random() * 300 + 300);
    gameLoop();
}

startBtn.addEventListener('click', startGame);